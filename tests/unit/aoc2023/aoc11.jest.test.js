const {
  part1,
  part2,
  parseInput,
  findEmptyRowsAndCols,
  calculateShortestPaths,
} = require("../../../src/aoc2023/aoc11");
const { aoc_input, aoc_test_input } = require("../../../config");
const { test, expect } = require("@jest/globals");
const fs = require("fs");

test("parseInput", () => {
  const input = `...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....`;

  const expected = [
    [".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", "#", ".", ".", ".", ".", "."],
  ];

  expect(parseInput(input)).toEqual(expected);
});

test("findEmptyRowsAndCols", () => {
  const input = [
    [".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", "#", ".", ".", ".", ".", "."],
  ];

  const expected = {
    emptyRows: new Set([3, 7]),
    emptyCols: new Set([2, 5, 8]),
  };

  expect(findEmptyRowsAndCols(input)).toEqual(expected);
});

test("calculateShortestPaths", () => {
  const input = [
    [".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "#", ".", "."],
    ["#", ".", ".", ".", "#", ".", ".", ".", ".", "."],
  ];

  const emptyRows = new Set([3, 7]);
  const emptyCols = new Set([2, 5, 8]);

  expect(calculateShortestPaths(input, emptyRows, emptyCols, 2)).toEqual(374);
  expect(calculateShortestPaths(input, emptyRows, emptyCols, 1000000)).toEqual(
    82000210
  );
});
